using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading;

namespace RemoteControl.Models
{
    public class UsbModel
    {
        public IUsbInterface UsbDevice;
        public string APTXPort = string.Empty;
        public string EcomilkPort = string.Empty;

        public UsbModel(IUsbInterface usbDevice)
        {
            UsbDevice = usbDevice;

            new Thread(async () =>
            {
                string data = string.Empty;
                while (!UsbDevice.GetInitDone()) ;

                foreach (string port in UsbDevice.GetPorts())
                {
                    while (true)
                    {
                        //try
                        //{
                        byte[] buffer = new byte[1024];
                        data += await UsbDevice.Read(port, buffer);
                        string data1 = Encoding.UTF8.GetString(buffer);

                        //if (string.IsNullOrEmpty(APTXPort) || string.IsNullOrEmpty(EcomilkPort))
                        if (string.IsNullOrEmpty(APTXPort))
                        {
                            if (data.Contains("1F-85-01"))
                            {
                                APTXPort = port;
                            }
                            if (data.Contains("ECOMILK"))
                            {
                                EcomilkPort = port;
                            }
                        }
                        else
                            break;
                        //}
                        //catch { }
                    }
                }

                data = string.Empty;
                while (true)
                {
                    //try
                    //{
                    byte[] buffer = new byte[1024];
                    data += await UsbDevice.Read(APTXPort, buffer);
                    string data1 = Encoding.UTF8.GetString(buffer);
                    if (App.DataModel.SNum == DataModel.Error)
                    {
                        //if (data.Contains("str,serial_num:"))
                        //{
                        //    uint snum = DataParse(data, "str,serial_num:", NumberStyles.Number);
                        //    SNum = snum;
                        //}
                        if (data.Contains("SNUM"))
                        {
                            uint[] snum = DataParse(data, "SNUM", NumberStyles.Number);
                            App.DataModel.SNum = snum[0];
                        }
                    }
                    if ((App.DataModel.aptxId[0] == DataModel.Error) ||
                        (App.DataModel.aptxId[1] == DataModel.Error) ||
                        (App.DataModel.aptxId[2] == DataModel.Error))
                    {
                        //if (data.Contains("CS 3 ADR: 1000 W:"))
                        //{
                        //    uint aptid = DataParse(data, "CS 3 ADR: 1000 W:", NumberStyles.HexNumber);
                        //    aptId[0] = aptid;
                        //    aptId = aptId;
                        //    AptId = AptId;
                        //}
                        //if (data.Contains("CS 3 ADR: 1004 W:"))
                        //{
                        //    uint aptid = DataParse(data, "CS 3 ADR: 1004 W:", NumberStyles.HexNumber);
                        //    aptId[1] = aptid;
                        //    aptId = aptId;
                        //    AptId = AptId;
                        //}
                        //if (data.Contains("CS 3 ADR: 1008 W:"))
                        //{
                        //    uint aptid = DataParse(data, "CS 3 ADR: 1008 W:", NumberStyles.HexNumber);
                        //    aptId[2] = aptid;
                        //    aptId = aptId;
                        //    AptId = AptId;
                        //}
                        if (data.Contains("readid Device_id"))
                        {
                            uint[] aptid = DataParse(data, "readid Device_id", NumberStyles.HexNumber);
                            App.DataModel.aptxId[0] = aptid[0];
                            App.DataModel.aptxId[1] = aptid[1];
                            App.DataModel.aptxId[2] = aptid[2];
                            App.DataModel.AptId = App.DataModel.AptId;
                        }
                    }
                    if ((App.DataModel.Current == DataModel.Error) || (App.DataModel.Maxi == DataModel.Error))
                    {
                        //if (data.Contains("pulses written"))
                        //{
                        //    uint remaining = DataParse(data, "pulses written", NumberStyles.Number);
                        //    Remaining = remaining;
                        //}
                        if (data.Contains("MAXI"))
                        {
                            uint[] maxi = DataParse(data, "MAXI", NumberStyles.Number);
                            App.DataModel.Maxi = maxi[0];
                        }
                        if (data.Contains("Found:"))
                        {
                            uint[] current = DataParse(data, "Found:", NumberStyles.Number);
                            App.DataModel.Current = current[0];
                        }
                        if ((App.DataModel.Current != DataModel.Error) && (App.DataModel.Maxi != DataModel.Error))
                            App.DataModel.Remaining = App.DataModel.Maxi - App.DataModel.Current;
                    }
                    //if (data.Contains("Done Init"))
                    //{
                    //    DoneInit = true;
                    //}

                    //if ((BindingContext != null) &&
                    //    (BindingContext as CowIdViewModel)?.IsPageOpened == true)
                    //    return;
                    //
                    //BindingContext = new CowIdViewModel()
                    //{
                    //    Id = DependencyService.Get<IRemoteControlUsbDevice>().GetData(),
                    //};
                    //await Current.MainPage.Navigation.PushAsync(new CowIdPage());
                    //}
                    //catch { }
                }
            })
            { Name = "UsbRx" }.Start();

            new Thread(async () =>
            {
                while (!UsbDevice.GetInitDone()) ;

                while (true)
                {
                    Thread.Sleep(1000);

                    //if (string.IsNullOrEmpty(APTXPort) || string.IsNullOrEmpty(EcomilkPort))
                    if (string.IsNullOrEmpty(APTXPort))
                    {
                        foreach (string port in UsbDevice.GetPorts())
                            await UsbDevice.Write(port, Encoding.UTF8.GetBytes("getid,3#"));
                    }
                    else
                        break;
                }

                while (true)
                {
                    Thread.Sleep(1000);

                    if (App.DataModel.SNum == DataModel.Error)
                        await UsbDevice.Write(APTXPort, Encoding.UTF8.GetBytes("testread,3#"));
                    else if (App.DataModel.Current == DataModel.Error)
                        //App.DataModel.UsbDevice.Send("find,3#");
                        await UsbDevice.Write(APTXPort, Encoding.UTF8.GetBytes("find,3#"));
                    else if ((App.DataModel.aptxId[0] == DataModel.Error) ||
                             (App.DataModel.aptxId[1] == DataModel.Error) ||
                             (App.DataModel.aptxId[2] == DataModel.Error))
                        //App.DataModel.UsbDevice.Send("readid#");
                        await UsbDevice.Write(APTXPort, Encoding.UTF8.GetBytes("readid#"));
                }
            })
            { Name = "UsbTx" }.Start();
        }

        private uint[] DataParse(string data, string pattern, NumberStyles numberStyles)
        {
            uint[] num = new uint[6];
            string snum = new string(data?.Substring(data.IndexOf(pattern) + pattern.Length)?.TakeWhile(c => ((c != '\r') && (c != 'p')))?.ToArray());
            if (((numberStyles == NumberStyles.HexNumber) && (snum.Length <= 8)) ||
                ((numberStyles == NumberStyles.Number) && (snum.Length <= 10)))
            {
                uint.TryParse(snum,
                             NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | numberStyles,
                             CultureInfo.InvariantCulture,
                             out num[0]);
            }
            else
            {
                for (int i = 0; i < snum.Length / 8; i++)
                {
                    uint.TryParse(new string(snum.Skip(i * 8).Take(8).ToArray()),
                                 NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | numberStyles,
                                 CultureInfo.InvariantCulture,
                                 out num[i]);
                }
            }
            return num;
        }
    }
}
